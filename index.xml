<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Abstract Machines</title><link>https://binderdavid.github.io/abstract-machines-script/</link><description>Recent content on Abstract Machines</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://binderdavid.github.io/abstract-machines-script/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://binderdavid.github.io/abstract-machines-script/docs/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://binderdavid.github.io/abstract-machines-script/docs/introduction/</guid><description>Introduction # Overview # Between high-level programming languages (Java, Haskell, Rust, Prolog&amp;hellip;) and low-level machine models (x86, ARM, RISC-V, FPGAs, Turing machines,&amp;hellip;) there is an intermediate category of abstract machines. These abstract machines are much simpler than programming languages, which are mainly intended for human users, yet abstract enough to not be concerned with details of concrete instruction set or computer architectures. These abstract machines are what we are going to study in this seminar.</description></item><item><title>Lambda Calculus</title><link>https://binderdavid.github.io/abstract-machines-script/docs/lambda-calculus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://binderdavid.github.io/abstract-machines-script/docs/lambda-calculus/</guid><description>The Lambda Calculus # We will briefly review the basics of the lambda calculus. We will use this section to establish a common vocabulary for the following sections, and in order to ensure that everyone is on the same page.
Syntax # The terms of the lambda calculus consist of only three constructs; variables x, the application of one lambda term to another lambda term (t t) and lambda abstractions \x.</description></item><item><title>The SECD machine</title><link>https://binderdavid.github.io/abstract-machines-script/docs/secd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://binderdavid.github.io/abstract-machines-script/docs/secd/</guid><description>The SECD machine # Example Javascript embedding # Consider the grammar for arithmetic expressions, where n is a natural number.
tm ::= n | (tm + tm) | (tm * tm) Every expression which corresponds to this grammar will generate a parsing tree, you can try this out by typing in an expression below.
var app = Elm.Main.init({ node: document.getElementById('myapp') }); app.ports.sendMessage.subscribe(function(message) { MathJax.typeset(); }); Embed Purescript # If purescript works, then a number should be logged to the dev console.</description></item></channel></rss>